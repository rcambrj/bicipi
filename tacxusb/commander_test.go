package tacxusb

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestIsValidFrame(t *testing.T) {
	type test struct {
		name      string
		response  []byte
		frameType []byte
		wantOut   bool
	}

	tests := []test{
		{
			name: "too short",
			response: []byte{
				// head unit
				0x12, 0xCC, 0x12, 0x00, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00,
				// motor brake
				0x03, 0x0C,
			},
			frameType: frameTypeVersion,
			wantOut:   false,
		},
		{
			name: "garbage head unit response",
			response: []byte{
				// head unit [garbage]
				0x03, 0x0C, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0xAE, 0x25, 0x7E, 0x18, 0x15, 0x08, 0x00, 0x00, 0xB0, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				// motor brake
				0x03, 0x0C, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0xAE, 0x25, 0x7E, 0x18, 0x15, 0x08, 0x00, 0x00, 0xB0, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				// padding
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			frameType: frameTypeVersion,
			wantOut:   false,
		},
		{
			name: "garbage motor brake response",
			response: []byte{
				// head unit
				0x12, 0xCC, 0x12, 0x00, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00,
				// motor brake [garbage]
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				// padding
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			frameType: frameTypeVersion,
			wantOut:   false,
		},
		{
			name: "valid response",
			response: []byte{
				// head unit
				0x12, 0xCC, 0x12, 0x00, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00,
				// motor brake
				0x03, 0x0C, 0x00, 0x00, 0x07, 0x10, 0x00, 0x00, 0xAE, 0x25, 0x7E, 0x18, 0x15, 0x08, 0x00, 0x00, 0xB0, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				// padding
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			frameType: frameTypeVersion,
			wantOut:   true,
		},
	}
	for _, tc := range tests {
		if out := isValidFrame(tc.response, tc.frameType); !cmp.Equal(out, tc.wantOut) {
			t.Errorf("%v = %#v; want %#v; %v", tc.name, out, tc.wantOut, cmp.Diff(tc.wantOut, out))
		}
	}
}
